graduation <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/Powers.txt")
head(graduation)
# Reading in the data - option 1, using stringsAsFactors
graduation <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/Powers.txt",
stringsAsFactors = TRUE)
head(graduation)
# Another option: coercing hsgrad from a character vector to a logical vector
as.logical(as.numeric(as.factor(graduation$hsgrad))-1)
graduation <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/Powers.txt")
saveRDS(graduation, "data/dat")
as.numeric(as.factor(graduation$hsgrad)
)
graduation$hsgrad
ifelse(graduation$hsgrad == "yes", 1, 0)
ifelse(graduation$hsgrad == "Yes", 1, 0)
# Or using ifelse()
as.logical(ifelse(graduation$hsgrad == "Yes", 1, 0))
## Reading in the data
#  Option 1:
#  Using stringsAsFactors
graduation <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/Powers.txt",
stringsAsFactors = TRUE)
## a) Run the logit regression
mod <- glm(hsgrad ~ ., # period functions as omnibus selector (kitchen sink additive model)
data = graduation,
family = "binomial")
summary(mod)
## Likelihood ratio test
#  Create a null model
nullMod <- glm(as.factor(hsgrad) ~ 1, # 1 = fit an intercept only (i.e. sort of a "mean")
data = graduation,
family = "binomial")
#  Run an anova test on the model compared to the null model
anova(nullMod, mod, test = "Chisq")
summary(nullMod)
class(graduation$hsgrad)
## Likelihood ratio test
#  Create a null model
nullMod <- glm(hsgrad ~ 1, # 1 = fit an intercept only (i.e. sort of a "mean")
data = graduation,
family = "binomial")
#  Run an anova test on the model compared to the null model
anova(nullMod, mod, test = "Chisq")
?anova
anova(nullMod, mod, test = "LRT")
exp(confint(mod)) # Remember: transform to odds ratio using exp()
# An option for making a data.frame of confidence intervals and coefficients
confMod <- data.frame(cbind(lower = exp(confint(mod)[,1]),
coefs = exp(coef(mod)),
upper = exp(confint(mod)[,2])))
# Then use this to make a plot
ggplot(data = confMod, mapping = aes(x = row.names(confMod), y = coefs)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), colour = "red") +
coord_flip()
## Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("tidyverse"),  pkgTest)
# Then use this to make a plot
ggplot(data = confMod, mapping = aes(x = row.names(confMod), y = coefs)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), colour = "red") +
coord_flip()
# Then use this to make a plot
ggplot(data = confMod, mapping = aes(x = row.names(confMod), y = coefs)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), colour = "red") +
coord_flip() +
labs(x = "Terms", y = "Coefficients")
model.matrix( ~ unique(nsibs), data = graduation)
model.matrix( ~ as.factor(unique(nsibs)), data = graduation)
# As a side note, we can use unique() with model.matrix() to create a matrix
# of different combinations of factor levels to use with predict(). Another
# function that can help with this is expand.grid()
with(graduation, expand.grid(nonwhite = unique(nonwhite),
mhs = unique(mhs),
fhs = unique(fhs)))
unique(graduation$nsibs)
# A better function to help with this is expand.grid()
with(graduation, expand.grid(nonwhite = unique(nonwhite),
mhs = unique(mhs),
fhs = unique(fhs)))
# Consider for instance if we had a model just consisting of factors:
mod2 <- glm(hsgrad ~ nonwhite + mhs + fhs,
data = graduation,
family = "binomial")
predicted_data <- with(graduation, expand.grid(nonwhite = unique(nonwhite),
mhs = unique(mhs),
fhs = unique(fhs)))
predicted_data <- cbind(predicted_data, predict(mod2,
newdata = predicted_data,
type = "response",
se = TRUE))
# Now we can use the code in Jeff's lecture to fill out the confidence intervals
# and predicted probability (see lecture)
predicted_data <- within(predicted_data,
{PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
predicted_data
graduation$nsibs_cut <- cut(graduation$nsibs,
breaks = c(0, 0.9, 1, 3, Inf),
include.lowest = TRUE,
labels = c("None", "One", "Two_Three", "FourPlus"))
mod3 <- glm(hsgrad ~.,
data = graduation[,!names(graduation) %in% c("nsibs", "nsibs_f")],
family = "binomial")
summary(mod3)
summary(mod)
# Extract confidence intervals around the estimates
confMod3 <- data.frame(cbind(lower = exp(confint(mod3)[,1]),
coefs = exp(coef(mod3)),
upper = exp(confint(mod3)[,2])))
# Plot the estimates and confidence intervals
ggplot(data = confMod3, mapping = aes(x = row.names(confMod3), y = coefs)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), colour = "red") +
coord_flip()
# Plot the estimates and confidence intervals
ggplot(data = confMod3, mapping = aes(x = row.names(confMod3), y = coefs)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), colour = "red") +
coord_flip() +
scale_y_continuous(breaks = seq(0,8,1)) +
labs(x = "Terms", y = "Coefficients")
?confint
summary(mod3)
?glm
## Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("tidyverse"),  pkgTest)
## Reading in the data
#  Option 1:
#  Using stringsAsFactors
graduation <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/Powers.txt",
stringsAsFactors = TRUE)
#  Option 3:
#  Coerce from a character vector to a logical vector
graduation$hsgrad <- as.logical(as.numeric(as.factor(graduation$hsgrad))-1)
## a) Run the logit regression
mod <- glm(hsgrad ~ ., # period functions as omnibus selector (kitchen sink additive model)
data = graduation,
family = "binomial")
?binomial
## Likelihood ratio test
#  Create a null model
nullMod <- glm(hsgrad ~ 1, # 1 = fit an intercept only (i.e. sort of a "mean")
data = graduation,
family = "binomial")
#  Run an anova test on the model compared to the null model
anova(nullMod, mod, test = "Chisq")
exp(confint(mod)) # Remember: transform to odds ratio using exp()
# An option for making a data.frame of confidence intervals and coefficients
confMod <- data.frame(cbind(lower = exp(confint(mod)[,1]),
coefs = exp(coef(mod)),
upper = exp(confint(mod)[,2])))
head(confMod)
# Then use this to make a plot
ggplot(data = confMod, mapping = aes(x = row.names(confMod), y = coefs)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), colour = "red") +
coord_flip() +
labs(x = "Terms", y = "Coefficients")
range(graduation$nsibs)
summary(graduation$nsibs)
hist(graduation$nsibs)
which(graduation$nsibs > 0)
which(graduation$nsibs < 0)
graduation <- graduation[-which(graduation$nsibs < 0),]
## Reading in the data
#  Option 1:
#  Using stringsAsFactors
graduation <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/Powers.txt",
stringsAsFactors = TRUE)
# Drop problematic cases
graduation <- graduation[-which(graduation$nsibs < 0),]
#  Option 3:
#  Coerce from a character vector to a logical vector
graduation$hsgrad <- as.logical(as.numeric(as.factor(graduation$hsgrad))-1)
## a) Run the logit regression
mod <- glm(hsgrad ~ ., # period functions as omnibus selector (kitchen sink additive model)
data = graduation,
family = "binomial")
## Likelihood ratio test
#  Create a null model
nullMod <- glm(hsgrad ~ 1, # 1 = fit an intercept only (i.e. sort of a "mean")
data = graduation,
family = "binomial")
#  Run an anova test on the model compared to the null model
anova(nullMod, mod, test = "Chisq")
# An option for making a data.frame of confidence intervals and coefficients
confMod <- data.frame(cbind(lower = exp(confint(mod)[,1]),
coefs = exp(coef(mod)),
upper = exp(confint(mod)[,2])))
# Then use this to make a plot
ggplot(data = confMod, mapping = aes(x = row.names(confMod), y = coefs)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), colour = "red") +
coord_flip() +
labs(x = "Terms", y = "Coefficients")
model.matrix( ~ unique(nsibs), data = graduation) # I see a problem with the data here...
# As a side note, we can use unique() with model.matrix() to create a matrix
# of different combinations of factor levels to use with predict(). Though it's
# probably not the best approach...
model.matrix( ~ as.factor(unique(nsibs)), data = graduation)
# A better function to help with this is expand.grid()
with(graduation, expand.grid(nonwhite = unique(nonwhite),
mhs = unique(mhs),
fhs = unique(fhs)))
# Consider for instance if we had a model just consisting of factors:
mod2 <- glm(hsgrad ~ nonwhite + mhs + fhs,
data = graduation,
family = "binomial")
predicted_data <- with(graduation, expand.grid(nonwhite = unique(nonwhite),
mhs = unique(mhs),
fhs = unique(fhs)))
predicted_data <- cbind(predicted_data, predict(mod2,
newdata = predicted_data,
type = "response",
se = TRUE))
# Now we can use the code in Jeff's lecture to fill out the confidence intervals
# and predicted probability (see lecture)
predicted_data <- within(predicted_data,
{PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
predicted_data
graduation$nsibs_cut <- cut(graduation$nsibs,
breaks = c(0, 0.9, 1, 3, Inf),
include.lowest = TRUE,
labels = c("None", "One", "Two_Three", "FourPlus"))
mod3 <- glm(hsgrad ~.,
data = graduation[,!names(graduation) %in% c("nsibs", "nsibs_f")],
family = "binomial")
summary(mod3)
# Extract confidence intervals around the estimates
confMod3 <- data.frame(cbind(lower = exp(confint(mod3)[,1]),
coefs = exp(coef(mod3)),
upper = exp(confint(mod3)[,2])))
# Plot the estimates and confidence intervals
ggplot(data = confMod3, mapping = aes(x = row.names(confMod3), y = coefs)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), colour = "red") +
coord_flip() +
scale_y_continuous(breaks = seq(0,8,1)) +
labs(x = "Terms", y = "Coefficients")
?coef
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
graduation <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/Powers.txt")
graduation <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/Powers.txt"
stringsAsFactors = TRUE)
graduation <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/Powers.txt",
stringsAsFactors = TRUE)
summary(graduation)
#drop problematic cases
graduation <- graduation[-which(graduation$nsibs < 0),]
# (a) Perform a logistic regression of hsgrad on the other variables in the data set.
# Compute a likelihood-ratio test of the omnibus null hypothesis that none of the explanatory variables influences high-school graduation.
# Then construct 95-percent confidence intervals for the coefficients of the seven explanatory variables.
# What conclusions can you draw from these results? Finally, offer two brief, but concrete, interpretations of each of the estimated coefficients of income and intact.
mod <- glm(hsgrad ~ .,
data = graduation,
family = binomial(link = "logit"))
# (a) Perform a logistic regression of hsgrad on the other variables in the data set.
# Compute a likelihood-ratio test of the omnibus null hypothesis that none of the explanatory variables influences high-school graduation.
# Then construct 95-percent confidence intervals for the coefficients of the seven explanatory variables.
# What conclusions can you draw from these results? Finally, offer two brief, but concrete, interpretations of each of the estimated coefficients of income and intact.
mod <- glm(hsgrad ~ .,
data = graduation,
family = binomial(link = "logit"))
summary(mod)
nullmod <- glm(hsgrad ~ 1, #we only use the intercept
data = graduation,
family = "binomial")
summary(mod)
summary(nullmod)
anova(nullmod, mod, test = "Chisq")
anova(nullmod, mod, test = "LRT")
?confint
exp(confint(mod))
confMod <- data.frame(cbind(lower = exp(confint(mod)[,1]),
coefs = exp(coef(mod)),
upper = exp(confint(mod)[,2])))
lapply(c('ggplot'),  pkgTest)
lapply(c('ggplot2'),  pkgTest)
ggplot(data = confMod, mapping = aes(x = row.names(confMod), y = coefs)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), colour = "red") +
coord_flip() +
labs(x = "Terms", y = "Coefficients")
?model.matrix
model.matrix( ~ unique(nsibs), data = graduation)
model.matrix( ~ as.factor(unique(nsibs)), data = graduation)
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
## Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("tidyverse"),  pkgTest)
## Reading in the data
#  Option 1:
#  Using stringsAsFactors
graduation <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/Powers.txt",
stringsAsFactors = TRUE)
#  Option 2:
#  Parse column names as a vector to colClasses
graduation <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/Powers.txt",
colClasses = c("hsgrad" = "factor",
"nonwhite" = "factor",
"mhs" = "factor",
"fhs" = "factor",
"intact" = "factor"))
summary(graduation)
# Drop problematic cases
graduation <- graduation[-which(graduation$nsibs < 0),]
#  Option 3:
#  Coerce from a character vector to a logical vector
graduation$hsgrad <- as.logical(as.numeric(as.factor(graduation$hsgrad))-1)
#  Option 4:
#  Use ifelse() with as.logical()...
as.logical(ifelse(graduation$hsgrad == "Yes", 1, 0))
## a) Run the logit regression
mod <- glm(hsgrad ~ ., # period functions as omnibus selector (kitchen sink additive model)
data = graduation,
family = "binomial")
mod <- glm(hsgrad ~ .,
data = graduation,
family = binomial(link = "logit")) # same as above (logit is default arg)
summary(mod)
## Likelihood ratio test
#  Create a null model
nullMod <- glm(hsgrad ~ 1, # 1 = fit an intercept only (i.e. sort of a "mean")
data = graduation,
family = "binomial")
#  Run an anova test on the model compared to the null model
anova(nullMod, mod, test = "Chisq")
anova(nullMod, mod, test = "LRT") # LRT is equivalent
##  Extracting confidence intervals (of the coefficients)
?confint
exp(confint(mod)) # Remember: transform to odds ratio using exp()
# An option for making a data.frame of confidence intervals and coefficients
confMod <- data.frame(cbind(lower = exp(confint(mod)[,1]),
coefs = exp(coef(mod)),
upper = exp(confint(mod)[,2])))
# Then use this to make a plot
ggplot(data = confMod, mapping = aes(x = row.names(confMod), y = coefs)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), colour = "red") +
coord_flip() +
labs(x = "Terms", y = "Coefficients")
## b) Factor vs numeric
#  The nsibs variable was parsed as an integer. The model.matrix() function is
#  used under the hood by lm() and glm() to create a design matrix of the model.
#  See the difference compared to when we input nsibs as an integer and a
#  factor:
?model.matrix
model.matrix( ~ unique(nsibs), data = graduation) # I see a problem with the data here...
# As a side note, we can use unique() with model.matrix() to create a matrix
# of different combinations of factor levels to use with predict(). Though it's
# probably not the best approach...
model.matrix( ~ as.factor(unique(nsibs)), data = graduation)
# A better function to help with this is expand.grid()
with(graduation, expand.grid(nonwhite = unique(nonwhite),
mhs = unique(mhs),
fhs = unique(fhs)))
# Consider for instance if we had a model just consisting of factors:
mod2 <- glm(hsgrad ~ nonwhite + mhs + fhs,
data = graduation,
family = "binomial")
predicted_data <- with(graduation, expand.grid(nonwhite = unique(nonwhite),
mhs = unique(mhs),
fhs = unique(fhs)))
predicted_data <- cbind(predicted_data, predict(mod2,
newdata = predicted_data,
type = "response",
se = TRUE))
# Now we can use the code in Jeff's lecture to fill out the confidence intervals
# and predicted probability (see lecture)
predicted_data <- within(predicted_data,
{PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
# As an alternative to coercing an interval variable as a factor, with one
# level for each unique value, we can "bin" the variable into a smaller number
# of categories using cut()
?cut
graduation$nsibs_cut <- cut(graduation$nsibs,
breaks = c(0, 0.9, 1, 3, Inf),
include.lowest = TRUE,
labels = c("None", "One", "Two_Three", "FourPlus"))
mod3 <- glm(hsgrad ~.,
data = graduation[,!names(graduation) %in% c("nsibs", "nsibs_f")],
family = "binomial")
# Now we can use the code in Jeff's lecture to fill out the confidence intervals
# and predicted probability (see lecture)
predicted_data <- within(predicted_data,
{PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
# As an alternative to coercing an interval variable as a factor, with one
# level for each unique value, we can "bin" the variable into a smaller number
# of categories using cut()
?cut
graduation$nsibs_cut <- cut(graduation$nsibs,
breaks = c(0, 0.9, 1, 3, Inf),
include.lowest = TRUE,
labels = c("None", "One", "Two_Three", "FourPlus"))
mod3 <- glm(hsgrad ~.,
data = graduation[,!names(graduation) %in% c("nsibs", "nsibs_f")],
family = "binomial")
summary(mod3)
summary(mod)
# Extract confidence intervals around the estimates
confMod3 <- data.frame(cbind(lower = exp(confint(mod3)[,1]),
coefs = exp(coef(mod3)),
upper = exp(confint(mod3)[,2])))
# Plot the estimates and confidence intervals
ggplot(data = confMod3, mapping = aes(x = row.names(confMod3), y = coefs)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), colour = "red") +
coord_flip() +
scale_y_continuous(breaks = seq(0,8,1)) +
labs(x = "Terms", y = "Coefficients")
View(graduation)
