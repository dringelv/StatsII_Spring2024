# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("survival", "eha", "tidyverse", "ggfortify", "stargazer"),  pkgTest)
data(child)
#### Completed
# a)
child_surv <- with(child, Surv(enter, exit, event))
km <- survfit(child_surv ~ 1, data = child)
summary(km, times = seq(0, 15, 1))
plot(km, main = "Kaplan-Meier Plot", xlab = "Years", ylim = c(0.7, 1))
autoplot(km)
km_socBranch <- survfit(child_surv ~ socBranch, data = child)
summary (km_socBranch)
autoplot(km_socBranch)
# b)
cox <- coxph(child_surv ~ sex + socBranch, data = child)
summary(cox)
drop1(cox, test = "Chisq")
stargazer(cox, type = "text")
# exponentiate parameter estimates to obtain hazard ratios
exp(-0.083546)
cox_fit <- survfit(cox)
autoplot(cox_fit)
newdat <- with(child,
data.frame(
sex = c("male", "female"), socBranch="official"
)
)
plot(survfit(cox, newdata = newdat), xscale = 12,
conf.int = T,
ylim = c(0.6, 1),
col = c("red", "blue"),
xlab = "Time",
ylab = "Survival proportion",
main = "")
legend("bottomleft",
legend=c("Male", "Female"),
lty = 1,
col = c("red", "blue"),
text.col = c("red", "blue"))
# Adding an interaction
cox.int <- coxph(child_surv ~ sex * socBranch, data = child)
summary(cox.int)
drop1(cox.int, test = "Chisq")
stargazer(cox.int, type = "text")
data <- read.csv("data/long97.csv")
data <- read.csv("data/long97.csv")
data <- read.csv("long97.csv")
with(data,
hist(job))
# OLS on original data
summary(m1 <- lm(job ~ ., data[,-2])) # effect of being a woman is negative
# OLS on censored data (tau y = 1)
summary(m2 <- lm(jobcen ~ ., data[,-1])) # effect of being a woman is negative but small and not significant
# OLS on truncated data
summary(m3 <- lm(jobcen ~ ., data = data[data$jobcen > 1, -1])) # effect of being a woman is positive and not significant
# Tobit
summary(m.tobit <- vglm(job ~ ., tobit(Lower = 1), data[,-2])) # effect of being a woman is significant and negative
data <- read.csv("long97.csv")
with(data,
hist(job))
# OLS on original data
summary(m1 <- lm(job ~ ., data[,-2])) # effect of being a woman is negative
# OLS on censored data (tau y = 1)
summary(m2 <- lm(jobcen ~ ., data[,-1])) # effect of being a woman is negative but small and not significant
# OLS on truncated data
summary(m3 <- lm(jobcen ~ ., data = data[data$jobcen > 1, -1])) # effect of being a woman is positive and not significant
# Tobit
summary(m.tobit <- vglm(job ~ ., tobit(Lower = 1), data[,-2])) # effect of being a woman is significant and negative
lapply(c("survival", "eha", "tidyverse", "ggfortify", "stargazer", "mass"),  pkgTest)
lapply(c("survival", "eha", "tidyverse", "ggfortify", "stargazer", "MASS"),  pkgTest)
# Tobit
summary(m.tobit <- vglm(job ~ ., tobit(Lower = 1), data[,-2])) # effect of being a woman is significant and negative
# Tobit
summary(m.tobit <- vgam(job ~ ., tobit(Lower = 1), data[,-2])) # effect of being a woman is significant and negative
lapply(c("survival", "eha", "tidyverse", "ggfortify", "stargazer", "MASS", "VGAM"),  pkgTest)
vglm
data(child)
#### Completed
# a)
child_surv <- with(child, Surv(enter, exit, event))
km <- survfit(child_surv ~ 1, data = child)
summary(km, times = seq(0, 15, 1))
plot(km, main = "Kaplan-Meier Plot", xlab = "Years", ylim = c(0.7, 1))
autoplot(km)
km_socBranch <- survfit(child_surv ~ socBranch, data = child)
summary (km_socBranch)
autoplot(km_socBranch)
# b)
cox <- coxph(child_surv ~ sex + socBranch, data = child)
summary(cox)
drop1(cox, test = "Chisq")
stargazer(cox, type = "text")
# exponentiate parameter estimates to obtain hazard ratios
exp(-0.083546)
cox_fit <- survfit(cox)
autoplot(cox_fit)
newdat <- with(child,
data.frame(
sex = c("male", "female"), socBranch="official"
)
)
plot(survfit(cox, newdata = newdat), xscale = 12,
conf.int = T,
ylim = c(0.6, 1),
col = c("red", "blue"),
xlab = "Time",
ylab = "Survival proportion",
main = "")
legend("bottomleft",
legend=c("Male", "Female"),
lty = 1,
col = c("red", "blue"),
text.col = c("red", "blue"))
# Adding an interaction
cox.int <- coxph(child_surv ~ sex * socBranch, data = child)
summary(cox.int)
drop1(cox.int, test = "Chisq")
stargazer(cox.int, type = "text")
data <- read.csv("long97.csv")
with(data,
hist(job))
# OLS on original data
summary(m1 <- lm(job ~ ., data[,-2])) # effect of being a woman is negative
# OLS on censored data (tau y = 1)
summary(m2 <- lm(jobcen ~ ., data[,-1])) # effect of being a woman is negative but small and not significant
# OLS on truncated data
summary(m3 <- lm(jobcen ~ ., data = data[data$jobcen > 1, -1])) # effect of being a woman is positive and not significant
# Tobit
summary(m.tobit <- vglm(job ~ ., tobit(Lower = 1), data[,-2])) # effect of being a woman is significant and negative
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("tidyverse", "VGAM"),  pkgTest)
# Long (1997) provides a dataset of factors affecting a scientist's first academic job. The
# Long (1997) provides a dataset of factors affecting a scientist's first academic job. The
# outcome variable, `job`, is the prestige of the first job, rated 1 to 5 (higher is more
# Long (1997) provides a dataset of factors affecting a scientist's first academic job. The
# outcome variable, `job`, is the prestige of the first job, rated 1 to 5 (higher is more
# distinguished). Other variables include:
# Long (1997) provides a dataset of factors affecting a scientist's first academic job. The
# outcome variable, `job`, is the prestige of the first job, rated 1 to 5 (higher is more
# distinguished). Other variables include:
# - `fem`: 1 if female, 0 if male
# Long (1997) provides a dataset of factors affecting a scientist's first academic job. The
# outcome variable, `job`, is the prestige of the first job, rated 1 to 5 (higher is more
# distinguished). Other variables include:
# - `fem`: 1 if female, 0 if male
# - `phd`: prestige of PhD department
# Long (1997) provides a dataset of factors affecting a scientist's first academic job. The
# outcome variable, `job`, is the prestige of the first job, rated 1 to 5 (higher is more
# distinguished). Other variables include:
# - `fem`: 1 if female, 0 if male
# - `phd`: prestige of PhD department
# - `ment`: citations received by mentor
# Long (1997) provides a dataset of factors affecting a scientist's first academic job. The
# outcome variable, `job`, is the prestige of the first job, rated 1 to 5 (higher is more
# distinguished). Other variables include:
# - `fem`: 1 if female, 0 if male
# - `phd`: prestige of PhD department
# - `ment`: citations received by mentor
# - `fel`: 1 if fellowship held, otherwise 0
# Long (1997) provides a dataset of factors affecting a scientist's first academic job. The
# outcome variable, `job`, is the prestige of the first job, rated 1 to 5 (higher is more
# distinguished). Other variables include:
# - `fem`: 1 if female, 0 if male
# - `phd`: prestige of PhD department
# - `ment`: citations received by mentor
# - `fel`: 1 if fellowship held, otherwise 0
# - `art`: number of articles published
# a) Explore the distribution of `job`. What conclusions do you draw regarding the original
# a) Explore the distribution of `job`. What conclusions do you draw regarding the original
# coding of the `job` variable? what effects could this have on the possible use of this
# a) Explore the distribution of `job`. What conclusions do you draw regarding the original
# coding of the `job` variable? what effects could this have on the possible use of this
# variable as an outcome in a regression model? Run an OLS model with `jobs` as the dependent
# b) The `jobcen` variable is a recoding of `job` such that values equal to or less than 1
# b) The `jobcen` variable is a recoding of `job` such that values equal to or less than 1
# are scored 1. Run an OLS model using this *censored* variable as the outcome. How do the
# c) Drop all observations from the dataset where `jobcen` is less than or equal to 1. Run an
# d) Finally, using `job` as the dependent variable, run a tobit regression using the vglm()
# d) Finally, using `job` as the dependent variable, run a tobit regression using the vglm()
# function from the VGAM package. You will need to set the arguments correctly, so read the
summary(data)
view(data)
summary(data)
data <- read.csv("long97.csv")
with(data,
hist(job))
summary(data)
view(data)
# OLS on original data
summary(m1 <- lm(job ~ ., data[,-2])) # effect of being a woman is negative
# OLS on censored data (tau y = 1)
summary(m2 <- lm(jobcen ~ ., data[,-1])) # effect of being a woman is negative but small and not significant
# OLS on truncated data
summary(m3 <- lm(jobcen ~ ., data = data[data$jobcen > 1, -1])) # effect of being a woman is positive and not significant
# Tobit
summary(m.tobit <- vglm(job ~ ., tobit(Lower = 1), data[,-2])) # effect of being a woman is significant and negative
